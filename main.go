package main

import (
	"flag"
	"fmt"
	"strconv"
	"strings"

	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/types/descriptorpb"
	"google.golang.org/protobuf/types/pluginpb"
)

const version = "1.0.0"

func main() {
	showVersion := flag.Bool("version", false, "print the version and exit")
	flag.Parse()
	if *showVersion {
		fmt.Printf("protoc-gen-go-gin %v\n", version)
		return
	}

	var flags flag.FlagSet

	protogen.Options{
		ParamFunc: flags.Set,
	}.Run(func(gen *protogen.Plugin) error {
		gen.SupportedFeatures = uint64(pluginpb.CodeGeneratorResponse_FEATURE_PROTO3_OPTIONAL)
		for _, f := range gen.Files {
			if !f.Generate {
				continue
			}
			generateFile(gen, f)
		}
		return nil
	})
}

const (
	contextPackage     = protogen.GoImportPath("context")
	httpPackage        = protogen.GoImportPath("net/http")
	jsonPackage        = protogen.GoImportPath("encoding/json")
	ginPackage         = protogen.GoImportPath("github.com/gin-gonic/gin")
	ginBingdingPackage = protogen.GoImportPath("github.com/gin-gonic/gin/binding")
	grpcPackage        = protogen.GoImportPath("google.golang.org/grpc")
	protojsonPackage   = protogen.GoImportPath("google.golang.org/protobuf/encoding/protojson")
)

// generateFile generates a _grpc.pb.go file containing gRPC service definitions.
func generateFile(gen *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
	if len(file.Services) == 0 {
		return nil
	}
	filename := file.GeneratedFilenamePrefix + "_gin.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-go-gin. DO NOT EDIT.")
	g.P("// versions:")
	g.P("// - protoc-gen-go-gin v", version)
	g.P("// - protoc             ", protocVersion(gen))
	if file.Proto.GetOptions().GetDeprecated() {
		g.P("// ", file.Desc.Path(), " is a deprecated file.")
	} else {
		g.P("// source: ", file.Desc.Path())
	}
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()
	generateFileContent(gen, file, g)
	return g
}

func protocVersion(gen *protogen.Plugin) string {
	v := gen.Request.GetCompilerVersion()
	if v == nil {
		return "(unknown)"
	}
	var suffix string
	if s := v.GetSuffix(); s != "" {
		suffix = "-" + s
	}
	return fmt.Sprintf("v%d.%d.%d%s", v.GetMajor(), v.GetMinor(), v.GetPatch(), suffix)
}

// generateFileContent generates the gRPC service definitions, excluding the package statement.
func generateFileContent(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile) {
	if len(file.Services) == 0 {
		return
	}

	for _, service := range file.Services {
		genService(gen, file, g, service)
	}
}

func serverSignature(g *protogen.GeneratedFile, method *protogen.Method) string {
	var reqArgs []string
	ret := "error"
	if !method.Desc.IsStreamingClient() && !method.Desc.IsStreamingServer() {
		reqArgs = append(reqArgs, g.QualifiedGoIdent(contextPackage.Ident("Context")))
		ret = "(*" + g.QualifiedGoIdent(method.Output.GoIdent) + ", error)"
	}
	if !method.Desc.IsStreamingClient() {
		reqArgs = append(reqArgs, "*"+g.QualifiedGoIdent(method.Input.GoIdent))
	}
	if method.Desc.IsStreamingClient() || method.Desc.IsStreamingServer() {
		reqArgs = append(reqArgs, method.Parent.GoName+"_"+method.GoName+"Server")
	}
	return method.GoName + "(" + strings.Join(reqArgs, ", ") + ") " + ret
}

func genService(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile, service *protogen.Service) {
	svr := strings.ToLower(service.GoName[:1]) + service.GoName[1:]
	g.P("var ", svr, "HTTP", " ", service.GoName, "HTTP", "Server")

	// Server interface.
	serverType := service.GoName + "HTTPServer"
	g.P("// ", serverType, " is the server API for ", service.GoName, " service.")

	if service.Desc.Options().(*descriptorpb.ServiceOptions).GetDeprecated() {
		g.P("//")
	}
	g.Annotate(serverType, service.Location)
	g.P("type ", serverType, " interface {")
	for _, method := range service.Methods {
		if method.Desc.IsStreamingClient() || method.Desc.IsStreamingServer() {
			continue
		}
		g.Annotate(serverType+"."+method.GoName, method.Location)
		if method.Desc.Options().(*descriptorpb.MethodOptions).GetDeprecated() {
		}
		g.P(method.Comments.Leading,
			serverSignature(g, method))
	}
	g.P("}")
	g.P()

	for _, method := range service.Methods {
		if method.Desc.IsStreamingClient() || method.Desc.IsStreamingServer() {
			continue
		}
		g.P("func ", unexport(service.GoName), method.GoName, "(c *", ginPackage.Ident("Context"), ") {")
		g.P("a := &", method.Input.GoIdent, "{}")
		g.P(`err := c.BindWith(a,`, ginBingdingPackage.Ident(`Default(c.Request.Method, c.Request.Header.Get("Content-Type")))`))
		g.P("type Status struct {")
		g.P("Code    int32       `json:\"code\"`")
		g.P("Message string      `json:\"message\"`")
		g.P("Data    interface{}  `json:\"data\"`")
		g.P("}")
		g.P("status := &Status{}")
		g.P(`if err != nil {
			status.Code = http.StatusBadRequest
			status.Message = err.Error()
			c.JSON(http.StatusBadRequest, status)
			return
			 }`)

		g.P("resp, err := ", svr, "HTTP.", method.GoName, "(c, a)")
		g.P(`if err != nil {
			status.Code = http.StatusInternalServerError
			status.Message = err.Error()
			c.JSON(http.StatusInternalServerError, status)
			return
			 }`)
		g.P("status.Data = resp")
		g.P("c.JSON(", httpPackage.Ident("StatusOK"), ", status)")
		g.P("}")
	}

	g.P("const (")
	for _, method := range service.Methods {
		path := strconv.Quote(fmt.Sprintf("/%s/%s", service.Desc.FullName(), method.Desc.Name()))
		g.P("Path", service.GoName, method.GoName, " = ", path)
	}
	g.P(")")

	g.P("func Register", service.GoName, "HTTP(e *", ginPackage.Ident("Engine"), ", svr ", service.GoName, "HTTPServer, middleware map[string][]gin.HandlerFunc){")
	g.P(svr, "HTTP = svr")
	for _, method := range service.Methods {

		if strings.HasPrefix(string(method.Desc.Name()), "Get") || strings.HasPrefix(string(method.Desc.Name()), "List") {
			g.P("e.GET(Path", service.GoName, method.GoName, ",", " append(middleware[Path", service.GoName, method.GoName, "], ", unexport(service.GoName), method.GoName, ")...)")
		} else {
			g.P("e.POST(Path", service.GoName, method.GoName, ",", " append(middleware[Path", service.GoName, method.GoName, "], ", unexport(service.GoName), method.GoName, ")...)")
		}

	}
	g.P("}")

}

func unexport(s string) string { return strings.ToLower(s[:1]) + s[1:] }
