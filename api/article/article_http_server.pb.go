// Code generated by protoc-gen-go-gin. DO NOT EDIT.
// versions:
// - protoc-gen-go-gin v0.0.1
// - protoc            v3.21.12
// source: api/article/article.proto

package article

import (
	gin "github.com/gin-gonic/gin"
	api "github.com/sunmi-OS/gocore/v2/api"
	ecode "github.com/sunmi-OS/gocore/v2/api/ecode"
	utils "github.com/sunmi-OS/gocore/v2/utils"
)

// BlogServiceHTTPServer is the server API for BlogService service.
type BlogServiceHTTPServer interface {
	// 获取文章列表 | 可以读取不多于999个文章列表
	GetArticles(*api.Context, *GetArticlesReq) (*GetArticlesReply, error)
	// 新建文章
	CreateArticle(*api.Context, *Article) (*Article, error)
}

func RegisterBlogServiceHTTPServer(s *gin.Engine, srv BlogServiceHTTPServer) {
	r := s.Group("/")
	r.POST("/v1/author/articles", _BlogService_GetArticles0_HTTP_Handler(srv))
	r.POST("/v1/articles", _BlogService_GetArticles1_HTTP_Handler(srv))
	r.POST("/v1/author/:author_id/articles", _BlogService_CreateArticle0_HTTP_Handler(srv))
}

var validateErr error

func SetAutoValidate(validatErr error) {
	validateErr = validatErr
}

func checkValidate(ctx *api.Context, req interface{}) error {
	err0 := ctx.ShouldBind(req)
	if err0 != nil {
		if validateErr != nil {
			if utils.IsRelease() {
				return validateErr
			}
			err1 := ecode.FromError(validateErr)
			err1.Status.Message = err1.Status.Message + "(" + err0.Error() + ")"
			return err1
		}

		if utils.IsRelease() {
			return api.ErrorBind
		}
		return err0
	}
	return nil
}

func setRetJSON(ctx *api.Context, resp interface{}, err error) {
	if flag, ok := ctx.C.Value(XLocalCustomReturn).(bool); ok && flag {
		return
	}
	ctx.RetJSON(resp, err)
}

const (
	XLocalCustomReturn = "x-local-custom-return"
)

func _BlogService_GetArticles0_HTTP_Handler(srv BlogServiceHTTPServer) func(g *gin.Context) {
	return func(g *gin.Context) {
		req := &GetArticlesReq{}
		ctx := api.NewContext(g)
		err := checkValidate(&ctx, req)
		if err != nil {
			setRetJSON(&ctx, "{}", err)
			return
		}
		resp, err := srv.GetArticles(&ctx, req)
		setRetJSON(&ctx, resp, err)
	}
}

func _BlogService_GetArticles1_HTTP_Handler(srv BlogServiceHTTPServer) func(g *gin.Context) {
	return func(g *gin.Context) {
		req := &GetArticlesReq{}
		ctx := api.NewContext(g)
		err := checkValidate(&ctx, req)
		if err != nil {
			setRetJSON(&ctx, "{}", err)
			return
		}
		resp, err := srv.GetArticles(&ctx, req)
		setRetJSON(&ctx, resp, err)
	}
}

func _BlogService_CreateArticle0_HTTP_Handler(srv BlogServiceHTTPServer) func(g *gin.Context) {
	return func(g *gin.Context) {
		req := &Article{}
		ctx := api.NewContext(g)
		err := checkValidate(&ctx, req)
		if err != nil {
			setRetJSON(&ctx, "{}", err)
			return
		}
		resp, err := srv.CreateArticle(&ctx, req)
		setRetJSON(&ctx, resp, err)
	}
}
