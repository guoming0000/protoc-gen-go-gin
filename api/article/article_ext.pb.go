// Code generated by protoc-gen-go-gin. DO NOT EDIT.
// versions:
// - protoc-gen-go-gin v0.0.2
// - protoc            v3.21.12
// source: api/article/auth.proto

package article

import (
	api "github.com/sunmi-OS/gocore/v2/api"
	utils "github.com/sunmi-OS/gocore/v2/utils"
	metadata "google.golang.org/grpc/metadata"
	strconv "strconv"
)

type TResponse[T any] struct {
	Code int    `json:"code"`
	Data *T     `json:"data"`
	Msg  string `json:"msg"`
}

var validateErr error = api.ErrorBind
var releaseShowDetail bool
var disableValidate bool

// set you error or use api.ErrorBind(diable:是否启用自动validate, 如果启用则返回 validateErr or 原始错误)
func SetAutoValidate(disable bool, validatErr error, releaseShowDetail bool) {
	disableValidate = disable
	validateErr = validatErr
	releaseShowDetail = releaseShowDetail
}

func checkValidate(err error) error {
	if disableValidate || err == nil {
		return nil
	}
	if utils.IsRelease() && !releaseShowDetail {
		return validateErr
	}
	return err
}

const customReturnKey = "x-md-local-customreturn"

func SetCustomReturn(ctx *api.Context, flag bool) {
	c := ctx.Request.Context()
	md, ok := metadata.FromIncomingContext(c)
	if ok {
		md.Set(customReturnKey, []string{strconv.FormatBool(flag)}...)
	} else {
		md = metadata.Pairs(customReturnKey, strconv.FormatBool(flag))
	}
	c = metadata.NewIncomingContext(c, md)
	ctx.Request = ctx.Request.WithContext(c)
}

func GetCustomReturn(ctx *api.Context) bool {
	c := ctx.Request.Context()
	md, ok := metadata.FromIncomingContext(c)
	if ok {
		flag, err := strconv.ParseBool(md.Get(customReturnKey)[0])
		if err != nil {
			return false
		}
		return flag
	}
	return false
}

func setRetJSON(ctx *api.Context, resp interface{}, err error) {
	if GetCustomReturn(ctx) {
		return
	}
	ctx.RetJSON(resp, err)
}
