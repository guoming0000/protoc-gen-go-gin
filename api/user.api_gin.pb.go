// Code generated by protoc-gen-go-gin. DO NOT EDIT.
// versions:
// - protoc-gen-go-gin v1.0.0
// - protoc             v3.19.3
// source: proto/user.api.proto

package api

import (
	gin "github.com/gin-gonic/gin"
	binding "github.com/gin-gonic/gin/binding"
	http "net/http"
)

var userServiceGin UserServiceServer

func createUserG(c *gin.Context) {
	a := &User{}
	err := c.BindWith(a, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type")))
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}
	resp, err := userServiceGin.CreateUser(c, a)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}
	c.JSON(http.StatusOK, resp)
}
func deleteUserG(c *gin.Context) {
	a := &UserId{}
	err := c.BindWith(a, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type")))
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}
	resp, err := userServiceGin.DeleteUser(c, a)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}
	c.JSON(http.StatusOK, resp)
}
func updateUserG(c *gin.Context) {
	a := &UpdateUserReq{}
	err := c.BindWith(a, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type")))
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}
	resp, err := userServiceGin.UpdateUser(c, a)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}
	c.JSON(http.StatusOK, resp)
}
func getUserG(c *gin.Context) {
	a := &UserId{}
	err := c.BindWith(a, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type")))
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}
	resp, err := userServiceGin.GetUser(c, a)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}
	c.JSON(http.StatusOK, resp)
}
func listUsersG(c *gin.Context) {
	a := &ListUsersReq{}
	err := c.BindWith(a, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type")))
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}
	resp, err := userServiceGin.ListUsers(c, a)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}
	c.JSON(http.StatusOK, resp)
}
func RegisterGin(e *gin.Engine, svr UserServiceServer) {
	userServiceGin = svr
	e.POST("/example.UserService/CreateUser", createUserG)
	e.POST("/example.UserService/DeleteUser", deleteUserG)
	e.POST("/example.UserService/UpdateUser", updateUserG)
	e.POST("/example.UserService/GetUser", getUserG)
	e.POST("/example.UserService/ListUsers", listUsersG)
}
