// Code generated by protoc-gen-go-gin. DO NOT EDIT.
// versions:
// - protoc-gen-go-gin v0.0.1
// - protoc            v3.21.12
// source: api/article.proto

package article

import (
	gin "github.com/gin-gonic/gin"
	api "github.com/sunmi-OS/gocore/v2/api"
)

// BlogServiceHTTPServer is the server API for BlogService service.
type BlogServiceHTTPServer interface {
	GetArticles(*api.Context, *GetArticlesReq) (*GetArticlesReply, error)
	CreateArticle(*api.Context, *Article) (*Article, error)
}

func RegisterBlogServiceHTTPServer(s *gin.Engine, srv BlogServiceHTTPServer) {
	r := s.Group("/")
	r.POST("/v1/author/articles", _BlogService_GetArticles0_HTTP_Handler(srv))
	r.POST("/v1/articles", _BlogService_GetArticles1_HTTP_Handler(srv))
	r.POST("/v1/author/:author_id/articles", _BlogService_CreateArticle0_HTTP_Handler(srv))
}

func setRetJSON(ctx *api.Context, resp interface{}, err error) {
	if flag, ok := ctx.C.Value(XLocalCustomReturn).(bool); ok && flag {
		return
	}
	if err != nil {
		ctx.RetJSON(nil, err)
		return
	}
	ctx.RetJSON(resp, nil)
	return
}

const (
	XLocalCustomReturn = "x-local-custom-return"
)

func _BlogService_GetArticles0_HTTP_Handler(srv BlogServiceHTTPServer) func(g *gin.Context) {
	return func(g *gin.Context) {
		req := &GetArticlesReq{}
		ctx := api.NewContext(g)
		resp, err := srv.GetArticles(&ctx, req)
		setRetJSON(&ctx, resp, err)
	}
}

func _BlogService_GetArticles1_HTTP_Handler(srv BlogServiceHTTPServer) func(g *gin.Context) {
	return func(g *gin.Context) {
		req := &GetArticlesReq{}
		ctx := api.NewContext(g)
		resp, err := srv.GetArticles(&ctx, req)
		setRetJSON(&ctx, resp, err)
	}
}

func _BlogService_CreateArticle0_HTTP_Handler(srv BlogServiceHTTPServer) func(g *gin.Context) {
	return func(g *gin.Context) {
		req := &Article{}
		ctx := api.NewContext(g)
		resp, err := srv.CreateArticle(&ctx, req)
		setRetJSON(&ctx, resp, err)
	}
}
